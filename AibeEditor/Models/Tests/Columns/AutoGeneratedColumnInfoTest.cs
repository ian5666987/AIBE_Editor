using Extension.Models;
using Extension.String;
using System.Collections.Generic;
using System.Linq;
using logic = Aibe.Models.Tests.AibeSyntaxCheckerLogic;

namespace Aibe.Models.Tests {
  public class AutoGeneratedColumnInfoTest : CommonBaseInfo {
    public Dictionary<string, string> TableColumnPairs { get; private set; } = new Dictionary<string, string>();
    public AutoGeneratedColumnInfoTest(string desc) : base(desc) {
      CheckerResult.Description = desc;
      CheckerResult.DisplayText = "Auto Generated Column";
      CheckerResult.Result = IsValid;
      if (!HasRightSide)
        return;
      SyntaxCheckerResult subResult = new SyntaxCheckerResult {
        DisplayText = "Table-Column Pairs",
        Description = RightSide,
        Result = true,
      };
      CheckerResult.SubResults.Add(subResult);
      var rightParts = RightSide.GetTrimmedNonEmptyParts(',');
      foreach (var rightPart in rightParts) {
        SyntaxCheckerResult subSubResult = new SyntaxCheckerResult {
          DisplayText = "Table-Column Pair",
          Description = rightPart,
        };
        subResult.SubResults.Add(subSubResult);
        var pairs = rightPart.GetTrimmedNonEmptyParts(':');
        if (pairs.Count < 2) {
          subSubResult.Message = "Incomplete Pair";
          continue;
        }
        TableColumnPairs.Add(pairs[0], pairs[1]); //adds every valid pair
        bool tableFound = logic.UseDataDB ? logic.FindDataTable(pairs[0]) : true;
        bool columnFound = logic.UseDataDB ? logic.FindDataTableColumn(pairs[0], pairs[1]) : true;
        subSubResult.Result = tableFound && columnFound;
        subSubResult.Message = subSubResult.Result ? "Valid Pair [" + pairs[0] + ", " + pairs[1] + "]" :
          "Table [" + pairs[0] + "] " + (tableFound ? "Found" : "Not Found In Data DB") + 
          ", Column [" + pairs[1] + "] " + (columnFound ? "Found" : "Not Found In Data DB");
      }
    }

    public SyntaxCheckerResult CheckerResult { get; private set; } = new SyntaxCheckerResult();
  }
}