using Extension.Models;
using Extension.String;
using System.Collections.Generic;
using System.Linq;

namespace Aibe.Models.Tests {
  public class HistoryInfoTest : CommonBaseInfo {
    public const string DefaultHRTSColumnName = "HRTS";
    public const string AutoGeneratedHRTSWord = "AUTO-GENERATED";
    public Dictionary<string, string> ColumnTranslation { get; private set; }
    public bool IsTransferAll { get { return ColumnTranslation == null || !ColumnTranslation.Any(); } }
    public string CustomHRTSColumnName { get; private set; }
    public bool HasCustomHRTSColumnName { get { return CustomHRTSColumnName != null; } }
    public HistoryInfoTest(string desc) : base(desc) {
      CheckerResult.Description = desc;
      CheckerResult.DisplayText = "History Table";
      CheckerResult.Result = true;
      CheckerResult.Message = "(Loosely-Checked) Valid History Table Name";

      if (!HasRightSide)
        return;

      var rightParts = RightSide.GetTrimmedNonEmptyParts(',');
      Dictionary<string, string> tempDict = new Dictionary<string, string>();
      foreach (var rightPart in rightParts) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "History Table Description",
          Description = rightPart,
        };
        CheckerResult.SubResults.Add(subResult);
        SimpleExpression exp = new SimpleExpression(rightPart, ":");
        if (!exp.IsValid) {
          subResult.Message = "Invalid Description";
          continue;
        }
        subResult.Message = "Valid Description";
        subResult.Result = true;

        SyntaxCheckerResult subSubResult = new SyntaxCheckerResult {
          DisplayText = "Original Column Name",
          Description = exp.LeftSide,
          Result = true,
          Message = "(Loosely-Checked) Valid Column Name",
        };
        subResult.SubResults.Add(subSubResult);

        if(!exp.IsSingular && exp.RightSide.EqualsIgnoreCase(AutoGeneratedHRTSWord)) {
          CustomHRTSColumnName = exp.LeftSide;
          subSubResult.DisplayText = "Timestamp Custom Column Name";
          subSubResult.Message = "Valid Timestamp Custom Column Name";

          subSubResult = new SyntaxCheckerResult {
            DisplayText = "Timestamp Custom Column Name Keyword",
            Description = exp.RightSide,
            Result = true,
            Message = "Valid Keyword [" + exp.RightSide + "]",
          };
          subResult.SubResults.Add(subSubResult);
          continue;
        } else if (!exp.IsSingular && !exp.RightSide.EqualsIgnoreCase(AutoGeneratedHRTSWord)) {
          subSubResult = new SyntaxCheckerResult {
            DisplayText = "History Table Column Name",
            Description = exp.RightSide,
            Result = true,
            Message = "(Loosely-Checked) Valid History Table Column Name",
          };
          subResult.SubResults.Add(subSubResult);
          continue;
        }

        tempDict.Add(exp.LeftSide, exp.IsSingular ? exp.LeftSide : exp.RightSide);
      }
      if (tempDict.Any())
        ColumnTranslation = tempDict;
    }

    public SyntaxCheckerResult CheckerResult { get; private set; } = new SyntaxCheckerResult();
  }
}
