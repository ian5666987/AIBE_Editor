using Aibe.Models.DB;
using Extension.Database.SqlServer;
using Extension.Models;
using Extension.String;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using logic = Aibe.Models.Tests.AibeSyntaxCheckerLogic;

namespace Aibe.Models.Tests {
  public class MetaInfoTest {
    public string TableName { get; private set; }
    public string TableDisplayName { get; private set; }
    private string _tableSource;
    public string TableSource { get { return string.IsNullOrWhiteSpace(_tableSource) ? TableName : _tableSource; } }
    public List<PrefilledColumnInfoTest> PrefilledColumns { get; private set; } = new List<PrefilledColumnInfoTest>();
    private const short defaultItemsPerPage = 20;
    public short ItemsPerPage { get; private set; } = defaultItemsPerPage; //give default value 20
    public List<OrderByInfoTest> OrderBys { get; private set; } = new List<OrderByInfoTest>();
    public List<ActionInfoTest> Actions { get; private set; } = new List<ActionInfoTest>();
    public List<string> DefaultActions { get; private set; } = new List<string>();
    public List<ActionInfoTest> TableActions { get; private set; } = new List<ActionInfoTest>();
    public List<string> DefaultTableActions { get; private set; } = new List<string>();
    public List<TextFieldColumnInfoTest> TextFieldColumns { get; private set; } = new List<TextFieldColumnInfoTest>();
    public List<PictureColumnInfoTest> PictureColumns { get; private set; } = new List<PictureColumnInfoTest>();
    public List<string> IndexShownPictureColumns { get; private set; } = new List<string>();
    public List<string> RequiredColumns { get; private set; } = new List<string>();
    public List<NumberLimitColumnInfoTest> NumberLimitColumns { get; private set; } = new List<NumberLimitColumnInfoTest>();
    public List<RegexCheckedColumnInfoTest> RegexCheckedColumns { get; private set; } = new List<RegexCheckedColumnInfoTest>();
    public List<RegexCheckedColumnExampleInfoTest> RegexCheckedColumnExamples { get; private set; } = new List<RegexCheckedColumnExampleInfoTest>();
    public List<UserRelatedFilterInfoTest> UserRelatedFilters { get; private set; } = new List<UserRelatedFilterInfoTest>();
    public bool FilterIsDisabled { get; private set; }
    public List<InclusionInfoTest> ForcedFilterColumns { get; private set; } = new List<InclusionInfoTest>();
    public List<ExclusionInfoTest> ColumnExclusions { get; private set; } = new List<ExclusionInfoTest>();
    public List<ExclusionInfoTest> FilterExclusions { get; private set; } = new List<ExclusionInfoTest>();
    public List<ExclusionInfoTest> DetailsExclusions { get; private set; } = new List<ExclusionInfoTest>();
    public List<ExclusionInfoTest> CreateEditExclusions { get; private set; } = new List<ExclusionInfoTest>();
    public List<ExclusionInfoTest> CsvExclusions { get; private set; } = new List<ExclusionInfoTest>();
    public List<string> AccessExclusions { get; private set; } = new List<string>();
    public List<ColoringInfoTest> Colorings { get; private set; } = new List<ColoringInfoTest>();
    public List<DropDownInfoTest> FilterDropDowns { get; private set; } = new List<DropDownInfoTest>();
    public List<DropDownInfoTest> CreateEditDropDowns { get; private set; } = new List<DropDownInfoTest>();
    public List<AffixColumnInfoTest> PrefixesOfColumns { get; private set; } = new List<AffixColumnInfoTest>();
    public List<AffixColumnInfoTest> PostfixesOfColumns { get; private set; } = new List<AffixColumnInfoTest>();
    public List<ListColumnInfoTest> ListColumns { get; private set; } = new List<ListColumnInfoTest>();
    public List<TimeStampColumnInfoTest> TimeStampColumns { get; private set; } = new List<TimeStampColumnInfoTest>();
    public HistoryInfoTest HistoryTable { get; private set; }
    public List<HistoryTriggerInfoTest> HistoryTriggers { get; private set; } = new List<HistoryTriggerInfoTest>();
    public List<AutoGeneratedColumnInfoTest> AutoGeneratedColumns { get; private set; } = new List<AutoGeneratedColumnInfoTest>();
    public List<string> ColumnSequence { get; private set; } = new List<string>();
    public Dictionary<string, string> ColumnAliases { get; private set; } = new Dictionary<string, string>();
    public List<string> EditShowOnlyColumns { get; private set; } = new List<string>();
    public List<ScriptConstructorColumnInfoTest> ScriptColumnConstructors { get; private set; } = new List<ScriptConstructorColumnInfoTest>();
    public List<ScriptColumnInfoTest> ScriptColumns { get; private set; } = new List<ScriptColumnInfoTest>();
    public List<CustomDateTimeFormatInfoTest> CustomDateTimeFormatColumns { get; private set; } = new List<CustomDateTimeFormatInfoTest>();
    public List<EmailMakerTriggerInfoTest> EmailMakerTriggers { get; private set; } = new List<EmailMakerTriggerInfoTest>();
    public List<EmailMakerInfoTest> EmailMakers { get; private set; } = new List<EmailMakerInfoTest>();
    public List<AttachmentInfoTest> NonPictureAttachments { get; private set; } = new List<AttachmentInfoTest>();
    public List<string> DownloadColumns { get; private set; } = new List<string>();
    public List<ActionTriggerInfoTest> PreActionTriggers { get; private set; } = new List<ActionTriggerInfoTest>();
    public List<ActionProcedureInfoTest> PreActionProcedures { get; private set; } = new List<ActionProcedureInfoTest>();
    public List<ActionTriggerInfoTest> PostActionTriggers { get; private set; } = new List<ActionTriggerInfoTest>();
    public List<ActionProcedureInfoTest> PostActionProcedures { get; private set; } = new List<ActionProcedureInfoTest>();
    public string TableType { get; private set; } = Aibe.DH.NormalTableType;
    public AggregationStatementInfoTest AggregationStatement { get; private set; }
    public List<ForeignInfoColumnInfoTest> ForeignInfoColumns { get; private set; } = new List<ForeignInfoColumnInfoTest>();

    //Extra properties
    public bool IsValid { get; private set; }
    public List<EmailMakerFullInfoTest> EmailMakerFulls { get; private set; } = new List<EmailMakerFullInfoTest>();
    public List<DataColumn> RawDataColumns { get; set; } //This is just to get DataColumn, not DataRow, so that the info about this column in the database is known
    public List<string> RawDataColumnNames { get; set; }
    public List<DataColumn> ArrangedDataColumns { get; private set; } //This is just to get DataColumn, not DataRow, so that the info about this column in the database is known
    private List<string> dateTimeColumns { get; set; } //this is taken from the database
    public bool HasValidHistoryTable { get { return HistoryTable != null && HistoryTriggers != null && HistoryTriggers.Any(); } }

    public MetaInfoTest (IMetaItem metaItem) {
      AssignParameters(metaItem);
    }

    public void AssignParameters(IMetaItem metaItem) {
      if (metaItem == null || string.IsNullOrWhiteSpace(metaItem.TableName)) //null meta makes an invalid item
        return;

      UpdateTableName(metaItem.TableName);
      UpdateDisplayName(metaItem.DisplayName);
      UpdateTableSource(metaItem.TableSource);

      try { //do this as early as not to waste time... if we cannot proceed further
        RawDataColumns = SQLServerHandler.GetColumns(Aibe.DH.DataDBConnectionString, TableSource); //using TableSource instead of TableName here
        RawDataColumnNames = RawDataColumns.Select(x => x.ColumnName).ToList(); //needed for some things like CSV builder.
      } catch {
        //Invalid, do not use!
        CheckerResult.Message = "Fail To Get Data DB Columns";
        return;
      }

      dateTimeColumns = RawDataColumns.Where(x => x.DataType.ToString()
        .Substring(Aibe.DH.SharedPrefixDataType.Length).EqualsIgnoreCase(Aibe.DH.DateTimeDataType))
        .Select(x => x.ColumnName)
        .ToList();

      UpdatePrefilledColumns(metaItem.PrefilledColumns);
      UpdateItemsPerPage(metaItem.ItemsPerPage == null ? string.Empty : metaItem.ItemsPerPage.Value.ToString());
      UpdateOrderBy(metaItem.OrderBy);
      UpdateActionList(metaItem.ActionList);
      UpdateDefaultActionList(metaItem.DefaultActionList);
      UpdateTableActionList(metaItem.TableActionList);
      UpdateDefaultTableActionList(metaItem.DefaultTableActionList);
      UpdateTextFieldColumns(metaItem.TextFieldColumns);
      UpdatePictureColumns(metaItem.PictureColumns);
      UpdateIndexShownPictureColumns(metaItem.IndexShownPictureColumns);
      UpdateRequiredColumns(metaItem.RequiredColumns);
      UpdateNumberLimitColumns(metaItem.NumberLimitColumns);
      UpdateRegexCheckedColumns(metaItem.RegexCheckedColumns);
      UpdateRegexCheckedColumnExamples(metaItem.RegexCheckedColumnExamples);
      UpdateRegexPairs(); //Comes with both regexes above
      UpdateUserRelatedFilters(metaItem.UserRelatedFilters);
      UpdateDisableFilter(metaItem.DisableFilter == null ? string.Empty : metaItem.DisableFilter.Value.ToString());
      UpdateForcedFilterColumns(metaItem.ForcedFilterColumns);
      UpdateColumnExclusionList(metaItem.ColumnExclusionList);
      UpdateFilterExclusionList(metaItem.FilterExclusionList);
      UpdateDetailsExclusionList(metaItem.DetailsExclusionList);
      UpdateCreateEditExclusionList(metaItem.CreateEditExclusionList);
      UpdateCsvExclusionList(metaItem.CsvExclusionList);
      UpdateAccessExclusionList(metaItem.AccessExclusionList);
      UpdateColoringList(metaItem.ColoringList);
      UpdateCreateEditDropDownLists(metaItem.CreateEditDropDownLists);
      UpdateFilterDropDownLists(metaItem.FilterDropDownLists);
      UpdatePrefixesOfColumns(metaItem.PrefixesOfColumns);
      UpdatePostfixesOfColumns(metaItem.PostfixesOfColumns);
      UpdateListColumns(metaItem.ListColumns);
      UpdateTimeStampColumns(metaItem.TimeStampColumns);
      UpdateHistoryTable(metaItem.HistoryTable);
      UpdateHistoryTriggers(metaItem.HistoryTriggers);
      UpdateAutoGeneratedColumns(metaItem.AutoGeneratedColumns);
      UpdateColumnSequence(metaItem.ColumnSequence);
      UpdateColumnAliases(metaItem.ColumnAliases);
      ArrangedDataColumns = GetColumnSequenceFor(RawDataColumns); //can only be applied after column sequence is defined
      UpdateEditShowOnlyColumns(metaItem.EditShowOnlyColumns);
      UpdateScriptConstructorColumns(metaItem.ScriptConstructorColumns);
      UpdateScriptColumns(metaItem.ScriptColumns);
      UpdateCustomDateTimeFormatColumns(metaItem.CustomDateTimeFormatColumns);
      UpdateEmailMakerTriggers(metaItem.EmailMakerTriggers);
      UpdateEmailMakers(metaItem.EmailMakers);
      UpdateEmailMakersFull(); //comes with both email makers above
      UpdateNonPictureAttachmentColumns(metaItem.NonPictureAttachmentColumns);
      UpdateDownloadColumns(metaItem.DownloadColumns);
      UpdatePreActionTriggers(metaItem.PreActionTriggers);
      UpdatePreActionProcedures(metaItem.PreActionProcedures);
      UpdatePreActionFull();
      UpdatePostActionTriggers(metaItem.PostActionTriggers);
      UpdatePostActionProcedures(metaItem.PostActionProcedures);
      UpdatePostActionFull();
      UpdateTableType(metaItem.TableType);
      UpdateAggregationStatement(metaItem.AggregationStatement);
      UpdateForeignInfoColumns(metaItem.ForeignInfoColumns);

      IsValid = true; //Somehow, if failed before everything is finished, we cannot consider it as valid
      CheckerResult.Result = IsValid;
    }

    public SyntaxCheckerResult EvaluateTableName(string text) {
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNTableName, DisplayText = "Table Name", Result = true, Description = text
      };
      return result;
    }

    public object UpdateTableName(string text) {
      TableName = text;
      SyntaxCheckerResult newResult = EvaluateTableName(text);
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTableName);
      if (oldResult == null) { //new item
        CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
      return text;
    }

    public SyntaxCheckerResult EvaluateDisplayName(string text) {
      string tableDisplayName = string.IsNullOrWhiteSpace(text) ? TableName.ToCamelBrokenString() : text; //still uses TableName instead of TableSource here
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNDisplayName, DisplayText = "Display Name", Result = true, Description = text, Message = "Shown: " + tableDisplayName
      };
      CheckerResult.SubResults.Add(result);
      return result;
    }

    public object UpdateDisplayName(string text) {
      TableDisplayName = string.IsNullOrWhiteSpace(text) ? TableName.ToCamelBrokenString() : text; //still uses TableName instead of TableSource here
      SyntaxCheckerResult newResult = EvaluateDisplayName(text);
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDisplayName);
      if (oldResult == null) { //new item
        CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
      return text;
    }

    public SyntaxCheckerResult EvaluateTableSource(string text) {
      string tableSource = text;
      string usedTableSource = string.IsNullOrWhiteSpace(tableSource) ? TableName : tableSource;
      bool tableIsFound = logic.UseDataDB ? logic.FindDataTable(usedTableSource) : true;
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNTableSource, DisplayText = "Table Source", Result = tableIsFound, Description = text, Message = "Used Source: " + usedTableSource
      };
      if (!tableIsFound)
        result.Message += ". Table [" + usedTableSource + "] Not Found In Data DB";
      return result;
    }

    public object UpdateTableSource(string text) {
      _tableSource = text; //take from IMetaItem.TableSource here...
      SyntaxCheckerResult newResult = EvaluateTableSource(text);
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTableSource);
      if (oldResult == null) { //new item
        CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
      return text;
    }

    public SyntaxCheckerResult EvaluatePrefilledColumns(string text) {
      var items = text.ParseComponents()
        .Select(x => new PrefilledColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPrefilledColumns;
      result.DisplayText = "Prefilled Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, "Pair: [" + item.Name + ", " + item.RightSide + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdatePrefilledColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PrefilledColumns = text.ParseComponents()
          .Select(x => new PrefilledColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePrefilledColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPrefilledColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PrefilledColumns != null && PrefilledColumns.Count > 0)
        PrefilledColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateItemsPerPage(string text) {
      short valResult = 0;
      bool parseResult = short.TryParse(text, out valResult);
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNItemsPerPage, DisplayText = "Items Per Page",
        Result = string.IsNullOrWhiteSpace(text) ? true : parseResult && valResult > 0,
        Description = text == null ? string.Empty : text,
      };
      result.Message = "Used Value: " + (parseResult && valResult > 0 ? valResult : defaultItemsPerPage);
      if (!result.Result)
        result.Message += ". Description Value Must Be A Positive Integer Between 1 To " + short.MaxValue;
      return result;
    }

    public object UpdateItemsPerPage(string text) {
      short valResult = 0;
      bool parseResult = short.TryParse(text, out valResult);
      ItemsPerPage = parseResult && valResult > 0 ? valResult : defaultItemsPerPage;
      SyntaxCheckerResult newResult = EvaluateItemsPerPage(text);
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNItemsPerPage);
      if (oldResult == null) { //new item
        CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
      if (parseResult && valResult > 0)
        return valResult;
      return null;
    }

    public SyntaxCheckerResult EvaluateOrderBy(string text) {
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNOrderBy;
      result.DisplayText = "Order By";
      result.Description = text;
      if (text.Trim().StartsWith(Aibe.DH.SQLScriptDirectivePrefix)) { //special order by using SQL script directive
        OrderByInfoTest obInfo = new OrderByInfoTest(text, true);
        result.SubResults.Add(obInfo.CheckerResult);
      } else {//normal order-bys
        var items = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new OrderByInfoTest(x, false)).ToList();
        int index = 0;
        foreach (var item in items) {
          item.CheckerResult.DisplayText = index == 0 ? "By" : "Then By";
          fillColumnCheckedResult(item.CheckerResult, item, item.Name + " " + item.OrderDirection);
          result.SubResults.Add(item.CheckerResult);
          ++index;
        }
      }
      result.Result = result.GetDirectSubResults();
      return result;
    }

    public object UpdateOrderBy(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        if (text.Trim().StartsWith(Aibe.DH.SQLScriptDirectivePrefix)) { //special order by using SQL script directive
          OrderByInfoTest obInfo = new OrderByInfoTest(text, true);
          OrderBys = obInfo.IsValid ? new List<OrderByInfoTest>() { obInfo } : new List<OrderByInfoTest>();
        } else {//normal order-bys
          OrderBys = text.GetTrimmedNonEmptyParts(';')
            .Select(x => new OrderByInfoTest(x, false)).ToList();
        }
        SyntaxCheckerResult newResult = EvaluateOrderBy(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNOrderBy);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (OrderBys != null && OrderBys.Count > 0)
        OrderBys.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateActionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ActionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNActionList;
      result.DisplayText = "Action List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Row Action";
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateActionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        Actions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ActionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateActionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNActionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (Actions != null && Actions.Count > 0)
        Actions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateDefaultActionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      List<string> rowActions = Aibe.DH.DefaultRowActions.Union(Aibe.DH.DefaultGroupByRowActions).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNDefaultActionList;
      result.DisplayText = "Default Row Action List";
      result.Description = text;
      result.Result = items.All(x => rowActions.Any(y => y.EqualsIgnoreCase(x)));
      foreach (var item in items) {
        bool defaultRowAction = Aibe.DH.DefaultRowActions.Any(y => y.EqualsIgnoreCase(item));
        bool defaultGroupByRowAction = Aibe.DH.DefaultGroupByRowActions.Any(y => y.EqualsIgnoreCase(item));
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "Default Row Action",
          Description = item,
          Result = defaultRowAction || defaultGroupByRowAction,
        };
        subResult.Message = subResult.Result ? "Valid Default Row Action" : 
          "Invalid Default Row Action. Valid Default Row Actions: " + string.Join(", ", rowActions);
        result.SubResults.Add(subResult);
      }
      return result;
    }

    public object UpdateDefaultActionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        DefaultActions = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateDefaultActionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDefaultActionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (DefaultActions != null && DefaultActions.Count > 0)
        DefaultActions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateTableActionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ActionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNTableActionList;
      result.DisplayText = "Table Action List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Table Action";
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateTableActionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        TableActions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ActionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateTableActionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTableActionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (TableActions != null && TableActions.Count > 0)
        TableActions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateDefaultTableActionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNDefaultTableActionList;
      result.DisplayText = "Default Table Action List";
      result.Description = text;
      result.Result = items.All(x => Aibe.DH.DefaultTableActions.Any(y => y.EqualsIgnoreCase(x)));
      foreach (var item in items) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "Default Table Action",
          Description = item,
          Result = Aibe.DH.DefaultTableActions.Any(y => y.EqualsIgnoreCase(item)),
        };
        subResult.Message = subResult.Result ? "Valid Default Table Action" : 
          "Invalid Default Table Action. Valid Default Table Actions: " + string.Join(", ", Aibe.DH.DefaultTableActions);
        result.SubResults.Add(subResult);
      }
      return result;
    }

    public object UpdateDefaultTableActionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        DefaultTableActions = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateDefaultTableActionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDefaultTableActionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (DefaultTableActions != null && DefaultTableActions.Count > 0)
        DefaultTableActions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateTextFieldColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new TextFieldColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNTextFieldColumns;
      result.DisplayText = "Text Field Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Row Size: " + item.RowSize);
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateTextFieldColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        TextFieldColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new TextFieldColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateTextFieldColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTextFieldColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (TextFieldColumns != null && TextFieldColumns.Count > 0)
        TextFieldColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePictureColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new PictureColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPictureColumns;
      result.DisplayText = "Picture Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, "Dim: " + item.Width + "x" + item.Height +
          (item.IsStretched ? ", Stretched-" + (item.HeightComesFirst ? "Height-" : "Width-") + "First" : string.Empty) + ", " +
          "Index Dim: " + item.IndexWidth + "x" + item.IndexHeight +
          (item.IndexIsStretched ? ", Stretched-" + (item.IndexHeightComesFirst ? "Height-" : "Width-") + "First" : string.Empty));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdatePictureColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PictureColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new PictureColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePictureColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPictureColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PictureColumns != null && PictureColumns.Count > 0)
        PictureColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateIndexShownPictureColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNIndexShownPictureColumns;
      result.DisplayText = "Index Shown Picture Columns";
      result.Description = text;
      fillBaseColumnCheckedResult(result, "Index Shown Picture Column", items);
      return result;
    }

    public object UpdateIndexShownPictureColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        IndexShownPictureColumns = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateIndexShownPictureColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNIndexShownPictureColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (IndexShownPictureColumns != null && IndexShownPictureColumns.Count > 0)
        IndexShownPictureColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateRequiredColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNRequiredColumns;
      result.DisplayText = "Required Columns";
      result.Description = text;
      fillBaseColumnCheckedResult(result, "Required Column", items);
      return result;
    }

    public object UpdateRequiredColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        RequiredColumns = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateRequiredColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNRequiredColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (RequiredColumns != null && RequiredColumns.Count > 0)
        RequiredColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateNumberLimitColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new NumberLimitColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNNumberLimitColumns;
      result.DisplayText = "Number Limit Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Number Limit Column";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Range: " +
          (item.Min == double.MinValue ? "Min" : item.Min.ToString()) + "-" +
          (item.Max == double.MaxValue ? "Max" : item.Max.ToString()));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateNumberLimitColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        NumberLimitColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new NumberLimitColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateNumberLimitColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNNumberLimitColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (NumberLimitColumns != null && NumberLimitColumns.Count > 0)
        NumberLimitColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateRegexCheckedColumns(string text) {
      var items = text.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnTag)
        .Select(x => new RegexCheckedColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNRegexCheckedColumns;
      result.DisplayText = "Regex Checked Columns";
      result.Description = text;
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      result.Result = (result.SubResults.Any() && result.GetDirectSubResults()) || string.IsNullOrWhiteSpace(text);
      return result;
    }

    public object UpdateRegexCheckedColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        RegexCheckedColumns = text.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnTag)
          .Select(x => new RegexCheckedColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateRegexCheckedColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNRegexCheckedColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (RegexCheckedColumns != null && RegexCheckedColumns.Count > 0)
        RegexCheckedColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateRegexCheckedColumnExamples(string text) {
      var items = text.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnExampleTag)
        .Select(x => new RegexCheckedColumnExampleInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNRegexCheckedColumnExamples;
      result.DisplayText = "Regex Checked Column Examples";
      result.Description = text;
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      result.Result = (result.SubResults.Any() && result.GetDirectSubResults()) || string.IsNullOrWhiteSpace(text);
      return result;
    }

    public object UpdateRegexCheckedColumnExamples(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        RegexCheckedColumnExamples = text.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnExampleTag)
          .Select(x => new RegexCheckedColumnExampleInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateRegexCheckedColumnExamples(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNRegexCheckedColumnExamples);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (RegexCheckedColumnExamples != null && RegexCheckedColumnExamples.Count > 0)
        RegexCheckedColumnExamples.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateRegexPairs() {
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = "RegexPairs";
      result.DisplayText = "[+] Regex Pairs";
      List<string> rcc = RegexCheckedColumns.Select(x => x.Name).ToList();
      List<string> rcce = RegexCheckedColumnExamples.Select(x => x.Name).ToList();
      foreach (var item in rcc) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Regex Column",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = rcce.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Regex Column" : "Unpaired Regex Column In [RegexCheckedColumn]";
      }
      foreach (var item in rcce.Except(rcc)) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Regex Column",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = rcc.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Regex Column" : "Unpaired Regex Column In [RegexCheckedColumnExample]";
      }
      result.Result = result.GetDirectSubResults();
      return result;
    }

    public void UpdateRegexPairs() {
      SyntaxCheckerResult newResult = EvaluateRegexPairs();
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == "RegexPairs");
      if (oldResult == null) { //new item
        if (newResult.SubResults.Any())
          CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
    }

    public SyntaxCheckerResult EvaluateUserRelatedFilters(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new UserRelatedFilterInfoTest(x)).ToList(); //exclude non successful parsing result
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNUserRelatedFilters;
      result.DisplayText = "User Related Filters";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(item.ThisColumnName));
        bool isUserColumnFound = logic.UserColumnNames.Any(x => x.EqualsIgnoreCase(item.UserInfoColumnName));
        item.CheckerResult.Description = item.UntrimmedOriginalDesc;
        item.CheckerResult.Result = isColumnFound && isUserColumnFound && item.IsValid;
        if (!isColumnFound)
          item.CheckerResult.Message += (string.IsNullOrWhiteSpace(item.CheckerResult.Message) ? string.Empty : ", ") +
            "Column [" + item.ThisColumnName + "] Not Found";
        if (!isUserColumnFound)
          item.CheckerResult.Message += (string.IsNullOrWhiteSpace(item.CheckerResult.Message) ? string.Empty : ", ") +
            "User Column [" + item.UserInfoColumnName + "] Not Found";
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateUserRelatedFilters(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        UserRelatedFilters = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new UserRelatedFilterInfoTest(x)).ToList(); //exclude non successful parsing result
        SyntaxCheckerResult newResult = EvaluateUserRelatedFilters(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNUserRelatedFilters);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (UserRelatedFilters != null && UserRelatedFilters.Count > 0)
        UserRelatedFilters.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateDisableFilter(string text) {
      bool filterIsDisabled = true.ToString().EqualsIgnoreCase(text);
      bool valid = string.IsNullOrWhiteSpace(text) || true.ToString().EqualsIgnoreCase(text) || false.ToString().EqualsIgnoreCase(text);
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNDisableFilter, DisplayText = "Disable Filter", Result = valid,
        Description = text,
        Message = "Filter Is Disabled: " + filterIsDisabled.ToString()
      };
      if (!valid)
        result.Message += ". Valid Description Values: " + true.ToString() + ", " + false.ToString();
      return result;
    }

    public object UpdateDisableFilter(string text) {
      FilterIsDisabled = true.ToString().EqualsIgnoreCase(text);
      if (!string.IsNullOrWhiteSpace(text)) {
        SyntaxCheckerResult newResult = EvaluateDisableFilter(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDisableFilter);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      }
      bool valid = string.IsNullOrWhiteSpace(text) || true.ToString().EqualsIgnoreCase(text) || false.ToString().EqualsIgnoreCase(text);
      if (valid)
        return FilterIsDisabled ? 1 : 0;
      return null;
    }

    public SyntaxCheckerResult EvaluateForcedFilterColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new InclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNForcedFilterColumns;
      result.DisplayText = "Forced Filter Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Forced Filter Column";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      CheckerResult.SubResults.Add(result);
      return result;
    }

    public object UpdateForcedFilterColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ForcedFilterColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new InclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateForcedFilterColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNForcedFilterColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ForcedFilterColumns != null && ForcedFilterColumns.Count > 0)
        ForcedFilterColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateColumnExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ExclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNColumnExclusionList;
      result.DisplayText = "Column Exclusion List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Column Exclusion";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateColumnExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ColumnExclusions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ExclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateColumnExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNColumnExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ColumnExclusions != null && ColumnExclusions.Count > 0)
        ColumnExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateFilterExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ExclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNFilterExclusionList;
      result.DisplayText = "Filter Exclusion List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Filter Exclusion";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateFilterExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        FilterExclusions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ExclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateFilterExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNFilterExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (FilterExclusions != null && FilterExclusions.Count > 0)
        FilterExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateDetailsExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ExclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNDetailsExclusionList;
      result.DisplayText = "Details Exclusion List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Details Exclusion";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateDetailsExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        DetailsExclusions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ExclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateDetailsExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDetailsExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (DetailsExclusions != null && DetailsExclusions.Count > 0)
        DetailsExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateCreateEditExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ExclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNCreateEditExclusionList;
      result.DisplayText = "Create Edit Exclusion List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Create Edit Exclusion";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateCreateEditExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        CreateEditExclusions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ExclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateCreateEditExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNCreateEditExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (CreateEditExclusions != null && CreateEditExclusions.Count > 0)
        CreateEditExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateCsvExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ExclusionInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNCsvExclusionList;
      result.DisplayText = "CSV Exclusion List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "CSV Exclusion";
        fillColumnCheckedResult(item.CheckerResult, item, "Column: " + item.Name + ", Roles: " +
          (item.Roles != null && item.Roles.Count > 0 ? string.Join(", ", item.Roles) : "All"));
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateCsvExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        CsvExclusions = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ExclusionInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateCsvExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNCsvExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (CsvExclusions != null && CsvExclusions.Count > 0)
        CsvExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateAccessExclusionList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNAccessExclusionList;
      result.DisplayText = "Access Exclusion List";
      result.Description = text;
      result.Result = items.All(x => logic.Roles.Any(y => y.EqualsIgnoreCase(x)) ||
        Aibe.DH.SpecialRoles.Any(y => y.EqualsIgnoreCase(x)));
      foreach (var item in items) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "Role",
          Description = item,
          Result = logic.Roles.Any(y => y.EqualsIgnoreCase(item)) ||
            Aibe.DH.SpecialRoles.Any(y => y.EqualsIgnoreCase(item)),
        };
        subResult.Message = subResult.Result ? 
          "Valid Role" : "Invalid Role. Valid Roles: " + string.Join(", ", logic.CompleteRoles);
        result.SubResults.Add(subResult);
      }
      return result;
    }

    public object UpdateAccessExclusionList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        AccessExclusions = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateAccessExclusionList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNAccessExclusionList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (AccessExclusions != null && AccessExclusions.Count > 0)
        AccessExclusions.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateColoringList(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ColoringInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNColoringList;
      result.DisplayText = "Coloring List";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Coloring";
        fillColumnCheckedResult(item);
        SyntaxCheckerResult subResult = item.CheckerResult.SubResults.FirstOrDefault(x => x.Name == "ConditionColumnName");
        if (subResult != null) { //if not null, edit the result of the checking for the condition column name
          bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(item.ConditionColumnName));
          subResult.Result = isColumnFound;
          subResult.Message = isColumnFound ? "Valid Condition Column Name" :
            "Column [" + item.ConditionColumnName + "] Not Found In This Table [" + TableName + "]";
        }
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateColoringList(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        Colorings = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ColoringInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateColoringList(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNColoringList);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (Colorings != null && Colorings.Count > 0)
        Colorings.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateCreateEditDropDownLists(string text) {
      var items = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
        .Select(x => new DropDownInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNCreateEditDropDownLists;
      result.DisplayText = "Create Edit Dropdown Lists";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Dropdown List";
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateCreateEditDropDownLists(string text) {
      //For different dropdown columns: Info1;Info2;...;InfoN
      //Thus, symbol ";" cannot be in the where clause
      if (!string.IsNullOrWhiteSpace(text)) {
        CreateEditDropDowns = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
          .Select(x => new DropDownInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateCreateEditDropDownLists(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNCreateEditDropDownLists);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (CreateEditDropDowns != null && CreateEditDropDowns.Count > 0)
        CreateEditDropDowns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateFilterDropDownLists(string text) {
      var items = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
        .Select(x => new DropDownInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNFilterDropDownLists;
      result.DisplayText = "Filter Dropdown Lists";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Dropdown List";
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateFilterDropDownLists(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        FilterDropDowns = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
          .Select(x => new DropDownInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateFilterDropDownLists(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNFilterDropDownLists);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (FilterDropDowns != null && FilterDropDowns.Count > 0)
        FilterDropDowns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePrefixesOfColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new AffixColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPrefixesOfColumns;
      result.DisplayText = "Prefixes Of Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Prefix Of Column";
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdatePrefixesOfColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PrefixesOfColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new AffixColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePrefixesOfColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPrefixesOfColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PrefixesOfColumns != null && PrefixesOfColumns.Count > 0)
        PrefixesOfColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePostfixesOfColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new AffixColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPostfixesOfColumns;
      result.DisplayText = "Postfixes Of Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Postfix Of Column";
        fillColumnCheckedResult(item.CheckerResult, item, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdatePostfixesOfColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PostfixesOfColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new AffixColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePostfixesOfColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPostfixesOfColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PostfixesOfColumns != null && PostfixesOfColumns.Count > 0)
        PostfixesOfColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateListColumns(string text) {
      var items = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
        .Select(x => new ListColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNListColumns;
      result.DisplayText = "List Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "List Column";
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateListColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ListColumns = text.ParseComponentsWithEnclosurePairs(';', true, Aibe.DH.DefaultScriptEnclosurePairs)
          .Select(x => new ListColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateListColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNListColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ListColumns != null && ListColumns.Count > 0)
        ListColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateTimeStampColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new TimeStampColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNTimeStampColumns;
      result.DisplayText = "Timestamp Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Timestamp Column";
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateTimeStampColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        TimeStampColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new TimeStampColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateTimeStampColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTimeStampColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (TimeStampColumns != null && TimeStampColumns.Count > 0)
        TimeStampColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateHistoryTable(string text) {
      HistoryInfoTest testHistoryTable = new HistoryInfoTest(text);
      testHistoryTable.CheckerResult.Name = Aibe.DH.MICNHistoryTable;
      return testHistoryTable.CheckerResult;
    }

    public object UpdateHistoryTable(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        HistoryInfoTest testHistoryTable = new HistoryInfoTest(text);
        HistoryTable = testHistoryTable.IsValid ? testHistoryTable : null;
        SyntaxCheckerResult newResult = EvaluateHistoryTable(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNHistoryTable);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else
        HistoryTable = null;
      return text;
    }

    public SyntaxCheckerResult EvaluateHistoryTriggers(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new HistoryTriggerInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNHistoryTriggers;
      result.DisplayText = "History Triggers";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdateHistoryTriggers(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        HistoryTriggers = text.ParseComponents(';')
          .Select(x => new HistoryTriggerInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateHistoryTriggers(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNHistoryTriggers);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (HistoryTriggers != null && HistoryTriggers.Count > 0)
        HistoryTriggers.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateAutoGeneratedColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new AutoGeneratedColumnInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNAutoGeneratedColumns;
      result.DisplayText = "Auto Generated Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateAutoGeneratedColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        AutoGeneratedColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new AutoGeneratedColumnInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateAutoGeneratedColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNAutoGeneratedColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (AutoGeneratedColumns != null && AutoGeneratedColumns.Count > 0)
        AutoGeneratedColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateColumnSequence(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNColumnSequence;
      result.DisplayText = "Column Sequence";
      result.Description = text;
      fillBaseColumnCheckedResult(result, "Column Sequence", items);
      return result;
    }

    public object UpdateColumnSequence(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ColumnSequence = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateColumnSequence(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNColumnSequence);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ColumnSequence != null && ColumnSequence.Count > 0)
        ColumnSequence.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateColumnAliases(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new CommonBaseInfo(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNColumnAliases;
      result.DisplayText = "Column Aliases";
      result.Description = text;
      foreach (var item in items) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "Column Alias",
          Description = item.UntrimmedOriginalDesc,
        };
        bool isValidColumn = RawDataColumnNames.Any(y => y.EqualsIgnoreCase(item.Name));
        subResult.Result = isValidColumn && item.HasRightSide;
        subResult.Message = subResult.Result ? "Valid Column Alias Pair [" + item.Name + ", " + item.RightSide + "]" :
          isValidColumn ? "Invalid Column Alias Pair" : "Column [" + item.Name + "] Not Found";
        result.SubResults.Add(subResult);
      }
      result.Result = !result.SubResults.Any() || result.SubResults.All(x => x.Result);
      return result;
    }

    public object UpdateColumnAliases(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ColumnAliases = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new CommonBaseInfo(x)).Where(x => x.IsValid && x.HasRightSide)
          .ToDictionary(x => x.Name, x => x.RightSide);
        SyntaxCheckerResult newResult = EvaluateColumnAliases(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNColumnAliases);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ColumnAliases != null && ColumnAliases.Count > 0)
        ColumnAliases.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateEditShowOnlyColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNEditShowOnlyColumns;
      result.DisplayText = "Edit Show-Only Columns";
      result.Description = text;
      fillBaseColumnCheckedResult(result, "Edit Show-Only Column", items);
      return result;
    }

    public object UpdateEditShowOnlyColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        EditShowOnlyColumns = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateEditShowOnlyColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNEditShowOnlyColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (EditShowOnlyColumns != null && EditShowOnlyColumns.Count > 0)
        EditShowOnlyColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateScriptConstructorColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ScriptConstructorColumnInfoTest(TableSource, x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNScriptConstructorColumns;
      result.DisplayText = "Script Constructor Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateScriptConstructorColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ScriptColumnConstructors = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ScriptConstructorColumnInfoTest(TableSource, x)).ToList();
        SyntaxCheckerResult newResult = EvaluateScriptConstructorColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNScriptConstructorColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ScriptColumnConstructors != null && ScriptColumnConstructors.Count > 0)
        ScriptColumnConstructors.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateScriptColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new ScriptColumnInfoTest(ScriptColumnConstructors, TableSource, x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNScriptColumns;
      result.DisplayText = "Script Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateScriptColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ScriptColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new ScriptColumnInfoTest(ScriptColumnConstructors, TableSource, x)).ToList();
        SyntaxCheckerResult newResult = EvaluateScriptColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNScriptColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ScriptColumns != null && ScriptColumns.Count > 0)
        ScriptColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateCustomDateTimeFormatColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new CustomDateTimeFormatInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNCustomDateTimeFormatColumns;
      result.DisplayText = "Custom Date-Time Format Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, "Valid Column [" + item.Name + "]");
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateCustomDateTimeFormatColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        CustomDateTimeFormatColumns = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new CustomDateTimeFormatInfoTest(x)) //only accept custom date time formats for date time columns for obvious reason
          .Where(x => x.IsValid && dateTimeColumns != null && dateTimeColumns.Any(y => y.EqualsIgnoreCase(x.Name)))
          .ToList();
        SyntaxCheckerResult newResult = EvaluateCustomDateTimeFormatColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNCustomDateTimeFormatColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (CustomDateTimeFormatColumns != null && CustomDateTimeFormatColumns.Count > 0)
        CustomDateTimeFormatColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateEmailMakerTriggers(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new EmailMakerTriggerInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNEmailMakerTriggers;
      result.DisplayText = "Email Maker Triggers";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdateEmailMakerTriggers(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        EmailMakerTriggers = text.ParseComponents(';')
          .Select(x => new EmailMakerTriggerInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateEmailMakerTriggers(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNEmailMakerTriggers);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (EmailMakerTriggers != null && EmailMakerTriggers.Count > 0)
        EmailMakerTriggers.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateEmailMakers(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new EmailMakerInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNEmailMakers;
      result.DisplayText = "Email Makers";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdateEmailMakers(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        EmailMakers = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new EmailMakerInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateEmailMakers(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNEmailMakers);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (EmailMakers != null && EmailMakers.Count > 0)
        EmailMakers.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateEmailMakersFull() {
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = "EmailMakersFull";
      result.DisplayText = "[+] Email Maker Checks";
      List<string> emT = EmailMakerTriggers.Select(x => x.Name).ToList();
      List<string> em = EmailMakers.Select(x => x.Name).ToList();
      foreach (var item in emT) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = em.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [EmailMakerTrigger]";
      }
      foreach (var item in em.Except(emT)) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = emT.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [EmailMaker]";
      }
      result.Result = result.GetDirectSubResults();
      return result;
    }

    public void UpdateEmailMakersFull() {
      if (EmailMakerFulls != null) {
        EmailMakerFulls.Clear();
        if (EmailMakers != null && EmailMakerTriggers != null && EmailMakers.Count > 0 && EmailMakerTriggers.Count > 0) {
          foreach (EmailMakerTriggerInfoTest trigger in EmailMakerTriggers) {
            EmailMakerInfoTest maker = EmailMakers.FirstOrDefault(x => x.Name.EqualsIgnoreCase(trigger.Name));
            if (maker == null) {
              continue;
            }
            EmailMakerFullInfoTest fullInfo = new EmailMakerFullInfoTest(trigger, maker);
            if (fullInfo.IsValid)
              EmailMakerFulls.Add(fullInfo);
          }
        }
        SyntaxCheckerResult newResult = EvaluateEmailMakersFull();
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == "EmailMakersFull");
        if (oldResult == null) { //new item
          if (newResult.SubResults.Any())
            CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      }
    }

    public SyntaxCheckerResult EvaluateNonPictureAttachmentColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';')
        .Select(x => new AttachmentInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNNonPictureAttachmentColumns;
      result.DisplayText = "Non-Picture Attachment Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items) {
        item.CheckerResult.DisplayText = "Non-Picture Attachment";
        fillColumnCheckedResult(item.CheckerResult, item, item.Name, item.CheckerResult.Message);
        result.SubResults.Add(item.CheckerResult);
      }
      return result;
    }

    public object UpdateNonPictureAttachmentColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        NonPictureAttachments = text.GetTrimmedNonEmptyParts(';')
          .Select(x => new AttachmentInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluateNonPictureAttachmentColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNNonPictureAttachmentColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (NonPictureAttachments != null && NonPictureAttachments.Count > 0)
        NonPictureAttachments.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluateDownloadColumns(string text) {
      var items = text.GetTrimmedNonEmptyParts(';');
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNDownloadColumns;
      result.DisplayText = "Download Columns";
      result.Description = text;
      fillBaseColumnCheckedResult(result, "Download Column", items);
      return result;
    }

    public object UpdateDownloadColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        DownloadColumns = text.GetTrimmedNonEmptyParts(';');
        SyntaxCheckerResult newResult = EvaluateDownloadColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNDownloadColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (DownloadColumns != null && DownloadColumns.Count > 0)
        DownloadColumns.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePreActionTriggers(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new ActionTriggerInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPreActionTriggers;
      result.DisplayText = "Pre-Action Triggers";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdatePreActionTriggers(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PreActionTriggers = text.ParseComponents(';')
          .Select(x => new ActionTriggerInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePreActionTriggers(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPreActionTriggers);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PreActionTriggers != null && PreActionTriggers.Count > 0)
        PreActionTriggers.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePreActionProcedures(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new ActionProcedureInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPreActionProcedures;
      result.DisplayText = "Pre-Action Procedures";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdatePreActionProcedures(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PreActionProcedures = text.ParseComponents(';')
          .Select(x => new ActionProcedureInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePreActionProcedures(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPreActionProcedures);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PreActionProcedures != null && PreActionProcedures.Count > 0)
        PreActionProcedures.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePreActionFull() {
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = "PreActionFull";
      result.DisplayText = "[+] Pre-Action Checks";
      List<string> paT = PreActionTriggers.Select(x => x.TriggerName).ToList();
      List<string> paP = PreActionProcedures.Select(x => x.TriggerName).ToList();
      foreach (var item in paT) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = paP.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [PreActionTrigger]";
      }
      foreach (var item in paP.Except(paT)) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = paT.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [PreActionProcedure]";
      }
      result.Result = result.GetDirectSubResults();
      return result;
    }

    public void UpdatePreActionFull() {
      SyntaxCheckerResult newResult = EvaluatePreActionFull();
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == "PreActionFull");
      if (oldResult == null) { //new item
        if (newResult.SubResults.Any())
          CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
    }

    public SyntaxCheckerResult EvaluatePostActionTriggers(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new ActionTriggerInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPostActionTriggers;
      result.DisplayText = "Post-Action Triggers";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdatePostActionTriggers(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PostActionTriggers = text.ParseComponents(';')
          .Select(x => new ActionTriggerInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePostActionTriggers(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPostActionTriggers);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PostActionTriggers != null && PostActionTriggers.Count > 0)
        PostActionTriggers.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePostActionProcedures(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new ActionProcedureInfoTest(x)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNPostActionProcedures;
      result.DisplayText = "Post-Action Procedures";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdatePostActionProcedures(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        PostActionProcedures = text.ParseComponents(';')
          .Select(x => new ActionProcedureInfoTest(x)).ToList();
        SyntaxCheckerResult newResult = EvaluatePostActionProcedures(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNPostActionProcedures);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (PostActionProcedures != null && PostActionProcedures.Count > 0)
        PostActionProcedures.Clear();
      return text;
    }

    public SyntaxCheckerResult EvaluatePostActionFull() {
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = "PostActionFull";
      result.DisplayText = "[+] Post-Action Checks";
      List<string> paT = PostActionTriggers.Select(x => x.TriggerName).ToList();
      List<string> paP = PostActionProcedures.Select(x => x.TriggerName).ToList();
      foreach (var item in paT) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = paP.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [PostActionTrigger]";
      }
      foreach (var item in paP.Except(paT)) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = "[+] Trigger Name",
          Description = item,
        };
        result.SubResults.Add(subResult);
        bool paired = paT.Any(x => x.EqualsIgnoreCase(item));
        subResult.Result = paired;
        subResult.Message = paired ? "Paired Trigger Name" : "Unpaired Trigger Name In [PostActionProcedure]";
      }
      result.Result = result.GetDirectSubResults();
      return result;
    }

    public void UpdatePostActionFull() {
      SyntaxCheckerResult newResult = EvaluatePostActionFull();
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == "PostActionFull");
      if (oldResult == null) { //new item
        if (newResult.SubResults.Any())
          CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
    }

    public SyntaxCheckerResult EvaluateTableType(string text) {
      SyntaxCheckerResult result = new SyntaxCheckerResult {
        Name = Aibe.DH.MICNTableType, DisplayText = "Table Type",
        Result = string.IsNullOrWhiteSpace(text) || Aibe.DH.TableTypes.Any(x => x.EqualsIgnoreCaseTrim(text)), //null is OK
        Description = text
      };
      result.Message = result.Result ? string.IsNullOrWhiteSpace(text) ? "No Description. Default [Normal] Table Type Applied" : 
        "Valid Table Type" : "Invalid Table Type. [Normal] Table Type Shall Be Applied";
      return result;
    }

    public object UpdateTableType(string text) {
      TableType = !string.IsNullOrWhiteSpace(text) && Aibe.DH.TableTypes.Any(x => x.EqualsIgnoreCaseTrim(text)) ?
        Aibe.DH.TableTypes.First(x => x.EqualsIgnoreCaseTrim(text)) : Aibe.DH.NormalTableType;
      SyntaxCheckerResult newResult = EvaluateTableType(text);
      SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNTableType);
      if (oldResult == null) { //new item
        CheckerResult.SubResults.Add(newResult);
      } else { //old item
        oldResult.FillFrom(newResult);
      }
      return text;
    }

    public SyntaxCheckerResult EvaluateAggregationStatement(string text) {
      AggregationStatementInfoTest aggStatement = new AggregationStatementInfoTest(text, TableSource);
      aggStatement.CheckerResult.Name = Aibe.DH.MICNAggregationStatement;
      return aggStatement.CheckerResult;
    }

    public object UpdateAggregationStatement(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        AggregationStatementInfoTest testAggStatement = new AggregationStatementInfoTest(text, TableSource);
        AggregationStatement = testAggStatement.IsValid ? testAggStatement : null;
        SyntaxCheckerResult newResult = EvaluateAggregationStatement(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNAggregationStatement);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else
        AggregationStatement = null;
      return text;
    }

    public SyntaxCheckerResult EvaluateForeignInfoColumns(string text) {
      var items = text.ParseComponents(';')
        .Select(x => new ForeignInfoColumnInfoTest(x, TableSource)).ToList();
      SyntaxCheckerResult result = new SyntaxCheckerResult { };
      result.Name = Aibe.DH.MICNForeignInfoColumns;
      result.DisplayText = "Foreign Info Columns";
      result.Description = text;
      result.Result = items.All(x => x.IsValid);
      foreach (var item in items)
        result.SubResults.Add(item.CheckerResult);
      return result;
    }

    public object UpdateForeignInfoColumns(string text) {
      if (!string.IsNullOrWhiteSpace(text)) {
        ForeignInfoColumns = text.ParseComponents(';')
          .Select(x => new ForeignInfoColumnInfoTest(x, TableSource)).ToList();
        SyntaxCheckerResult newResult = EvaluateForeignInfoColumns(text);
        SyntaxCheckerResult oldResult = CheckerResult.SubResults.FirstOrDefault(x => x.Name == Aibe.DH.MICNForeignInfoColumns);
        if (oldResult == null) { //new item
          CheckerResult.SubResults.Add(newResult);
        } else { //old item
          oldResult.FillFrom(newResult);
        }
      } else if (ForeignInfoColumns != null && ForeignInfoColumns.Count > 0)
        ForeignInfoColumns.Clear();
      return text;
    }

    public List<DataColumn> GetColumnSequenceFor(List<DataColumn> dataColumns) {
      List<DataColumn> arrangedDataColumns = new List<DataColumn>();
      if (dataColumns != null && ColumnSequence != null && ColumnSequence.Count > 0) {
        foreach (var sequence in ColumnSequence) {
          DataColumn column = dataColumns.FirstOrDefault(x => x.ColumnName.EqualsIgnoreCase(sequence));
          if (column == null)
            continue;
          arrangedDataColumns.Add(column);
        }
        foreach (var column in dataColumns) {
          if (arrangedDataColumns.Any(x => x.ColumnName.EqualsIgnoreCase(column.ColumnName)))
            continue;
          arrangedDataColumns.Add(column);
        }
      } else
        arrangedDataColumns = dataColumns;
      return arrangedDataColumns;
    }

    public SyntaxCheckerResult CheckerResult = new SyntaxCheckerResult() { DisplayText = "Meta" };

    private void fillColumnCheckedResult(SyntaxCheckerResult result, CommonBaseInfo item, string name, string successMessage) {
      bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(name));
      result.Result = isColumnFound && item.IsValid;
      result.Message = result.Result ? successMessage :
        !isColumnFound ? "Column [" + name + "] Not Found In This Table [" + TableName + "]" : "Invalid Syntax";
    }

    private void fillColumnCheckedResult(SyntaxCheckerResult result, CommonBaseInfo item, string successMessage) {
      bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(item.Name));
      result.Result = isColumnFound && item.IsValid;
      result.Message = result.Result ? successMessage :
        !isColumnFound ? "Column [" + item.Name + "] Not Found In This Table [" + TableName + "]" : "Invalid Syntax";
    }

    private void fillColumnCheckedResult(SyntaxCheckerResult result, RegexBaseInfoTest item, string successMessage) {
      bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(item.Name));
      result.Result = isColumnFound && item.IsValid;
      result.Message = result.Result ? successMessage :
        !isColumnFound ? "Column [" + item.Name + "] Not Found In This Table [" + TableName + "]" : "Invalid Syntax";
    }

    private void fillColumnCheckedResult(ColoringInfoTest item) {
      if (string.IsNullOrWhiteSpace(item.ColumnName))
        return;
      SyntaxCheckerResult subResult = item.CheckerResult.SubResults.FirstOrDefault(x => x.Name == "ColumnName");
      if (subResult == null)
        return;
      bool isColumnFound = RawDataColumnNames.Any(x => x.EqualsIgnoreCase(item.ColumnName));
      subResult.Result = isColumnFound;
      subResult.Message = isColumnFound ? "Valid Column Name" :
        "Column [" + item.ColumnName + "] Not Found In This Table [" + TableName + "]";
    }

    private void fillBaseColumnCheckedResult(SyntaxCheckerResult result, string name, List<string> columns) {
      result.Result = columns.All(x => RawDataColumnNames.Any(y => y.EqualsIgnoreCase(x)));
      foreach (var item in columns) {
        SyntaxCheckerResult subResult = new SyntaxCheckerResult {
          DisplayText = name,
          Description = item,
          Result = RawDataColumnNames.Any(y => y.EqualsIgnoreCase(item)),
        };
        subResult.Message = subResult.Result ? "Valid Column" : "Column [" + item + "] Not Found In This Table [" + TableName + "]";
        result.SubResults.Add(subResult);
      }
    }
  }
}

//TableDisplayName = string.IsNullOrWhiteSpace(metaItem.DisplayName) ? metaItem.TableName.ToCamelBrokenString() : //still uses TableName instead of TableSource here
//    metaItem.DisplayName;
//TableName = metaItem.TableName;
//_tableSource = metaItem.TableSource; //take from IMetaItem.TableSource here...

//CheckerResult.SubResults.Add(EvaluateTableName(metaItem.TableName));
//CheckerResult.SubResults.Add(EvaluateDisplayName(metaItem.DisplayName));
//CheckerResult.SubResults.Add(EvaluateTableSource(metaItem.TableSource));

//if (!string.IsNullOrWhiteSpace(metaItem.PrefilledColumns)) {
//  PrefilledColumns = metaItem.PrefilledColumns.ParseComponents()
//    .Select(x => new PrefilledColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluatePrefilledColumns(metaItem.PrefilledColumns));
//} else if (PrefilledColumns != null && PrefilledColumns.Count > 0)
//  PrefilledColumns.Clear();
//ItemsPerPage = metaItem.ItemsPerPage == null ? defaultItemsPerPage : metaItem.ItemsPerPage.Value;
//CheckerResult.SubResults.Add(EvaluateItemsPerPage(metaItem.ItemsPerPage == null ? null : metaItem.ItemsPerPage.Value.ToString()));

//if (!string.IsNullOrWhiteSpace(metaItem.OrderBy)) {
//  if (metaItem.OrderBy.Trim().StartsWith(Aibe.DH.SQLScriptDirectivePrefix)) { //special order by using SQL script directive
//    OrderByInfoTest obInfo = new OrderByInfoTest(metaItem.OrderBy, true);
//    OrderBys = obInfo.IsValid ? new List<OrderByInfoTest>() { obInfo } : new List<OrderByInfoTest>();
//  } else {//normal order-bys
//    OrderBys = metaItem.OrderBy.GetTrimmedNonEmptyParts(';')
//      .Select(x => new OrderByInfoTest(x, false)).ToList();
//  }
//  CheckerResult.SubResults.Add(EvaluateOrderBy(metaItem.OrderBy));
//} else if (OrderBys != null && OrderBys.Count > 0)
//  OrderBys.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ActionList)) {
//  Actions = metaItem.ActionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ActionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateActionList(metaItem.ActionList));
//} else if (Actions != null && Actions.Count > 0)
//  Actions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.DefaultActionList)) {
//  DefaultActions = metaItem.DefaultActionList.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateDefaultActionList(metaItem.DefaultActionList));
//} else if (DefaultActions != null && DefaultActions.Count > 0)
//  DefaultActions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.TableActionList)) {
//  TableActions = metaItem.TableActionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ActionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateTableActionList(metaItem.TableActionList));
//} else if (TableActions != null && TableActions.Count > 0)
//  TableActions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.DefaultTableActionList)) {
//  DefaultTableActions = metaItem.DefaultTableActionList.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateDefaultTableActionList(metaItem.DefaultTableActionList));
//} else if (DefaultTableActions != null && DefaultTableActions.Count > 0)
//  DefaultTableActions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.TextFieldColumns)) {
//  TextFieldColumns = metaItem.TextFieldColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new TextFieldColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateTextFieldColumns(metaItem.TextFieldColumns));
//} else if (TextFieldColumns != null && TextFieldColumns.Count > 0)
//  TextFieldColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.PictureColumns)) {
//  PictureColumns = metaItem.PictureColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new PictureColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluatePictureColumns(metaItem.PictureColumns));
//} else if (PictureColumns != null && PictureColumns.Count > 0)
//  PictureColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.IndexShownPictureColumns)) {
//  IndexShownPictureColumns = metaItem.IndexShownPictureColumns.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateIndexShownPictureColumns(metaItem.IndexShownPictureColumns));
//} else if (IndexShownPictureColumns != null && IndexShownPictureColumns.Count > 0)
//  IndexShownPictureColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.RequiredColumns)) {
//  RequiredColumns = metaItem.RequiredColumns.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateRequiredColumns(metaItem.RequiredColumns));
//} else if (RequiredColumns != null && RequiredColumns.Count > 0)
//  RequiredColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.NumberLimitColumns)) {
//  NumberLimitColumns = metaItem.NumberLimitColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new NumberLimitColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateNumberLimitColumns(metaItem.NumberLimitColumns));
//} else if (NumberLimitColumns != null && NumberLimitColumns.Count > 0)
//  NumberLimitColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.RegexCheckedColumns)) {
//  RegexCheckedColumns = metaItem.RegexCheckedColumns.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnTag)
//    .Select(x => new RegexCheckedColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateRegexCheckedColumns(metaItem.RegexCheckedColumns));
//} else if (RegexCheckedColumns != null && RegexCheckedColumns.Count > 0)
//  RegexCheckedColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.RegexCheckedColumnExamples)) {
//  RegexCheckedColumnExamples = metaItem.RegexCheckedColumnExamples.GetXMLTaggedInnerStrings(Aibe.DH.RegexCheckedColumnExampleTag)
//    .Select(x => new RegexCheckedColumnExampleInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateRegexCheckedColumnExamples(metaItem.RegexCheckedColumnExamples));
//} else if (RegexCheckedColumnExamples != null && RegexCheckedColumnExamples.Count > 0)
//  RegexCheckedColumnExamples.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.UserRelatedFilters)) {
//  UserRelatedFilters = metaItem.UserRelatedFilters.GetTrimmedNonEmptyParts(';')
//    .Select(x => new UserRelatedFilterInfoTest(x)).ToList(); //exclude non successful parsing result
//  CheckerResult.SubResults.Add(EvaluateUserRelatedFilters(metaItem.UserRelatedFilters));
//} else if (UserRelatedFilters != null && UserRelatedFilters.Count > 0)
//  UserRelatedFilters.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ForcedFilterColumns)) {
//  ForcedFilterColumns = metaItem.ForcedFilterColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new InclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateForcedFilterColumns(metaItem.ForcedFilterColumns));
//} else if (ForcedFilterColumns != null && ForcedFilterColumns.Count > 0)
//  ForcedFilterColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ColumnExclusionList)) {
//  ColumnExclusions = metaItem.ColumnExclusionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ExclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateColumnExclusionList(metaItem.ColumnExclusionList));
//} else if (ColumnExclusions != null && ColumnExclusions.Count > 0)
//  ColumnExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.FilterExclusionList)) {
//  FilterExclusions = metaItem.FilterExclusionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ExclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateFilterExclusionList(metaItem.FilterExclusionList));
//} else if (FilterExclusions != null && FilterExclusions.Count > 0)
//  FilterExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.DetailsExclusionList)) {
//  DetailsExclusions = metaItem.DetailsExclusionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ExclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateDetailsExclusionList(metaItem.DetailsExclusionList));
//} else if (DetailsExclusions != null && DetailsExclusions.Count > 0)
//  DetailsExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.CreateEditExclusionList)) {
//  CreateEditExclusions = metaItem.CreateEditExclusionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ExclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateCreateEditExclusionList(metaItem.CreateEditExclusionList));
//} else if (CreateEditExclusions != null && CreateEditExclusions.Count > 0)
//  CreateEditExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.CsvExclusionList)) {
//  CsvExclusions = metaItem.CsvExclusionList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ExclusionInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateCsvExclusionList(metaItem.CsvExclusionList));
//} else if (CsvExclusions != null && CsvExclusions.Count > 0)
//  CsvExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.AccessExclusionList)) {
//  AccessExclusions = metaItem.AccessExclusionList.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateAccessExclusionList(metaItem.AccessExclusionList));
//} else if (AccessExclusions != null && AccessExclusions.Count > 0)
//  AccessExclusions.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ColoringList)) {
//  Colorings = metaItem.ColoringList.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ColoringInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateColoringList(metaItem.ColoringList));
//} else if (Colorings != null && Colorings.Count > 0)
//  Colorings.Clear();

////For different dropdown columns: Info1;Info2;...;InfoN
////Thus, symbol ";" cannot be in the where clause
//if (!string.IsNullOrWhiteSpace(metaItem.CreateEditDropDownLists)) {
//  CreateEditDropDowns = metaItem.CreateEditDropDownLists.GetTrimmedNonEmptyParts(';')
//    .Select(x => new DropDownInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateCreateEditDropDownLists(metaItem.CreateEditDropDownLists));
//} else if (CreateEditDropDowns != null && CreateEditDropDowns.Count > 0)
//  CreateEditDropDowns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.FilterDropDownLists)) {
//  FilterDropDowns = metaItem.FilterDropDownLists.GetTrimmedNonEmptyParts(';')
//    .Select(x => new DropDownInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateFilterDropDownLists(metaItem.FilterDropDownLists));
//} else if (FilterDropDowns != null && FilterDropDowns.Count > 0)
//  FilterDropDowns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.PrefixesOfColumns)) {
//  PrefixesOfColumns = metaItem.PrefixesOfColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new AffixColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluatePrefixesOfColumns(metaItem.PrefixesOfColumns));
//} else if (PrefixesOfColumns != null && PrefixesOfColumns.Count > 0)
//  PrefixesOfColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.PostfixesOfColumns)) {
//  PostfixesOfColumns = metaItem.PostfixesOfColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new AffixColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluatePostfixesOfColumns(metaItem.PostfixesOfColumns));
//} else if (PostfixesOfColumns != null && PostfixesOfColumns.Count > 0)
//  PostfixesOfColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ListColumns)) {
//  ListColumns = metaItem.ListColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ListColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateListColumns(metaItem.ListColumns));
//} else if (ListColumns != null && ListColumns.Count > 0)
//  ListColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.TimeStampColumns)) {
//  TimeStampColumns = metaItem.TimeStampColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new TimeStampColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateTimeStampColumns(metaItem.TimeStampColumns));
//} else if (TimeStampColumns != null && TimeStampColumns.Count > 0)
//  TimeStampColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.HistoryTable)) {
//  HistoryInfoTest testHistoryTable = new HistoryInfoTest(metaItem.HistoryTable);
//  if (testHistoryTable.IsValid)
//    HistoryTable = testHistoryTable;
//  CheckerResult.SubResults.Add(EvaluateHistoryTable(metaItem.HistoryTable));
//} else
//  HistoryTable = null;

//if (!string.IsNullOrWhiteSpace(metaItem.HistoryTriggers)) {
//  HistoryTriggers = metaItem.HistoryTriggers.ParseComponents(';')
//    .Select(x => new HistoryTriggerInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateHistoryTriggers(metaItem.HistoryTriggers));
//} else if (HistoryTriggers != null && HistoryTriggers.Count > 0)
//  HistoryTriggers.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.AutoGeneratedColumns)) {
//  AutoGeneratedColumns = metaItem.AutoGeneratedColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new AutoGeneratedColumnInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateAutoGeneratedColumns(metaItem.AutoGeneratedColumns));
//} else if (AutoGeneratedColumns != null && AutoGeneratedColumns.Count > 0)
//  AutoGeneratedColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ColumnSequence)) {
//  ColumnSequence = metaItem.ColumnSequence.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateColumnSequence(metaItem.ColumnSequence));
//} else if (ColumnSequence != null && ColumnSequence.Count > 0)
//  ColumnSequence.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ColumnAliases)) {
//  ColumnAliases = metaItem.ColumnAliases.GetTrimmedNonEmptyParts(';')
//    .Select(x => new CommonBaseInfo(x)).Where(x => x.IsValid && x.HasRightSide)
//    .ToDictionary(x => x.Name, x => x.RightSide);
//  CheckerResult.SubResults.Add(EvaluateColumnAliases(metaItem.ColumnAliases));
//} else if (ColumnAliases != null && ColumnAliases.Count > 0)
//  ColumnAliases.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.EditShowOnlyColumns)) {
//  EditShowOnlyColumns = metaItem.EditShowOnlyColumns.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateEditShowOnlyColumns(metaItem.EditShowOnlyColumns));
//} else if (EditShowOnlyColumns != null && EditShowOnlyColumns.Count > 0)
//  EditShowOnlyColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ScriptConstructorColumns)) {
//  ScriptColumnConstructors = metaItem.ScriptConstructorColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ScriptConstructorColumnInfoTest(TableSource, x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateScriptConstructorColumns(metaItem.ScriptConstructorColumns));
//} else if (ScriptColumnConstructors != null && ScriptColumnConstructors.Count > 0)
//  ScriptColumnConstructors.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.ScriptColumns)) {
//  ScriptColumns = metaItem.ScriptColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new ScriptColumnInfoTest(ScriptColumnConstructors, TableSource, x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateScriptColumns(metaItem.ScriptColumns));
//} else if (ScriptColumns != null && ScriptColumns.Count > 0)
//  ScriptColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.CustomDateTimeFormatColumns)) {
//  CustomDateTimeFormatColumns = metaItem.CustomDateTimeFormatColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new CustomDateTimeFormatInfoTest(x)) //only accept custom date time formats for date time columns for obvious reason
//    .Where(x => x.IsValid && dateTimeColumns != null && dateTimeColumns.Any(y => y.EqualsIgnoreCase(x.Name)))
//    .ToList();
//  CheckerResult.SubResults.Add(EvaluateCustomDateTimeFormatColumns(metaItem.CustomDateTimeFormatColumns));
//} else if (CustomDateTimeFormatColumns != null && CustomDateTimeFormatColumns.Count > 0)
//  CustomDateTimeFormatColumns.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.EmailMakerTriggers)) {
//  EmailMakerTriggers = metaItem.EmailMakerTriggers.ParseComponents(';')
//    .Select(x => new EmailMakerTriggerInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateEmailMakerTriggers(metaItem.EmailMakerTriggers));
//} else if (EmailMakerTriggers != null && EmailMakerTriggers.Count > 0)
//  EmailMakerTriggers.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.EmailMakers)) {
//  EmailMakers = metaItem.EmailMakers.GetTrimmedNonEmptyParts(';')
//    .Select(x => new EmailMakerInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateEmailMakers(metaItem.EmailMakers));
//} else if (EmailMakers != null && EmailMakers.Count > 0)
//  EmailMakers.Clear();

//if (EmailMakerFulls != null) {
//  EmailMakerFulls.Clear();
//  if (EmailMakers != null && EmailMakerTriggers != null && EmailMakers.Count > 0 && EmailMakerTriggers.Count > 0) {
//    foreach (EmailMakerTriggerInfoTest trigger in EmailMakerTriggers) {
//      EmailMakerInfoTest maker = EmailMakers.FirstOrDefault(x => x.Name.EqualsIgnoreCase(trigger.Name));
//      if (maker == null) {
//        continue;
//      }
//      EmailMakerFullInfoTest fullInfo = new EmailMakerFullInfoTest(trigger, maker);
//      if (fullInfo.IsValid)
//        EmailMakerFulls.Add(fullInfo);
//    }
//  }
//  SyntaxCheckerResult result = EvaluateEmailMakersFull();
//  if (result.SubResults.Any())
//    CheckerResult.SubResults.Add(result);
//}

//if (!string.IsNullOrWhiteSpace(metaItem.NonPictureAttachmentColumns)) {
//  NonPictureAttachments = metaItem.NonPictureAttachmentColumns.GetTrimmedNonEmptyParts(';')
//    .Select(x => new AttachmentInfoTest(x)).ToList();
//  CheckerResult.SubResults.Add(EvaluateNonPictureAttachmentColumns(metaItem.NonPictureAttachmentColumns));
//} else if (NonPictureAttachments != null && NonPictureAttachments.Count > 0)
//  NonPictureAttachments.Clear();

//if (!string.IsNullOrWhiteSpace(metaItem.DownloadColumns)) {
//  DownloadColumns = metaItem.DownloadColumns.GetTrimmedNonEmptyParts(';');
//  CheckerResult.SubResults.Add(EvaluateDownloadColumns(metaItem.DownloadColumns));
//} else if (DownloadColumns != null && DownloadColumns.Count > 0)
//  DownloadColumns.Clear();
